// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to IrisApiEngine
class NativePluginApiBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativePluginApiBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativePluginApiBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int EnablePlugin(
    PluginSamplePtr plugin,
  ) {
    return _EnablePlugin(
      plugin,
    );
  }

  late final _EnablePluginPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(PluginSamplePtr)>>(
          'EnablePlugin');
  late final _EnablePlugin =
      _EnablePluginPtr.asFunction<int Function(PluginSamplePtr)>();

  int DisablePlugin(
    PluginSamplePtr plugin,
  ) {
    return _DisablePlugin(
      plugin,
    );
  }

  late final _DisablePluginPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(PluginSamplePtr)>>(
          'DisablePlugin');
  late final _DisablePlugin =
      _DisablePluginPtr.asFunction<int Function(PluginSamplePtr)>();

  PluginSamplePtr CreateSamplePlugin(
    ffi.Pointer<ffi.Void> rtcEnginePtr,
  ) {
    return _CreateSamplePlugin(
      rtcEnginePtr,
    );
  }

  late final _CreateSamplePluginPtr = _lookup<
          ffi.NativeFunction<PluginSamplePtr Function(ffi.Pointer<ffi.Void>)>>(
      'CreateSamplePlugin');
  late final _CreateSamplePlugin = _CreateSamplePluginPtr.asFunction<
      PluginSamplePtr Function(ffi.Pointer<ffi.Void>)>();

  void DestroySamplePlugin(
    PluginSamplePtr plugin,
  ) {
    return _DestroySamplePlugin(
      plugin,
    );
  }

  late final _DestroySamplePluginPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PluginSamplePtr)>>(
          'DestroySamplePlugin');
  late final _DestroySamplePlugin =
      _DestroySamplePluginPtr.asFunction<void Function(PluginSamplePtr)>();
}

typedef PluginSamplePtr = ffi.Pointer<ffi.Void>;
